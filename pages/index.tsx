import Head from "next/head";
import { useAudiogram } from "@/contexts/audiogramContext";
import axios from "axios";
import Link from "next/link";
import FileUpload from "@/components/FileDropzoneUpload";
import { FileWithPath, IMAGE_MIME_TYPE } from "@mantine/dropzone";
import { transcribeAudio } from "@/services/transcription";
import { Box, Button, Flex, Loader, Stack, Text } from "@mantine/core";
import { useEffect, useState } from "react";

export default function Home() {
  const [loading, setLoading] = useState({
    audioDropboxLoader: false,
    imgDropboxLoader: false,
  });
  const { audiogramDetails, setAudiogramDetails } = useAudiogram();

  const uploadImage = async (files: FileWithPath[]) => {
    setLoading({ ...loading, imgDropboxLoader: true });

    const formData = new FormData();

    if (files[0]) {
      formData.append("file", files[0]);
      formData.append("upload_preset", "audiogramImages");
    }

    try {
      const res = await axios.post(
        "https://api.cloudinary.com/v1_1/sayuk/image/upload",
        formData
      );

      setAudiogramDetails((prevDetails) => ({
        ...prevDetails,
        cover: res.data.secure_url,
      }));

      res.data.secure_url &&
        setLoading({ ...loading, imgDropboxLoader: false });
    } catch (err) {
      console.error(err);
    }
  };

  const uploadAudio = async (files: FileWithPath[]) => {
    setLoading({ ...loading, audioDropboxLoader: true });
    try {
      if (!files[0]) {
        throw new Error("Please select a file.");
      }

      const formData = new FormData();
      formData.append("file", files[0]);
      formData.append("upload_preset", "audiogramAudio");

      const { data } = await axios.post(
        "https://api.cloudinary.com/v1_1/sayuk/upload",
        formData
      );
      const { secure_url: audioUrl } = data;

      // Calling Transcription Service
      const srtUrl = await transcribeAudio(data.secure_url);

      audioUrl &&
        srtUrl &&
        setAudiogramDetails((prevDetails) => ({
          ...prevDetails,
          audio: audioUrl,
          srtFile: srtUrl,
        }));

      audioUrl &&
        srtUrl &&
        setLoading({ ...loading, audioDropboxLoader: false });
    } catch (error) {
      console.log(error);
    }
  };

  console.log(
    loading.imgDropboxLoader,
    "<---img",
    "||||",
    loading.audioDropboxLoader,
    "<---audio"
  );
  console.log();

  return (
    <>
      <Head>
        <title>Audiogram | Upload</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Flex
          mih={"100vh"}
          gap="xl"
          justify="space-between"
          align="stretch"
          direction="column"
          wrap="wrap"
          p={32}
        >
          <Stack>
            <Box>
              <FileUpload
                onDrop={uploadAudio}
                msg={"Drag or Click to upload Audio Files "}
                accept={["audio/mpeg"]}
                loading={loading.audioDropboxLoader}
              />
            </Box>

            <Box>
              <FileUpload
                msg={"Drag or Click to Upload Image Files"}
                onDrop={uploadImage}
                accept={IMAGE_MIME_TYPE}
                loading={loading.imgDropboxLoader}
              />
            </Box>
          </Stack>

          <Flex justify={"space-between"}>
            <Flex p={8} align="center">
              <Text
                variant="gradient"
                gradient={{ from: "indigo", to: "white", deg: 45 }}
                sx={{ fontFamily: "Greycliff CF, sans-serif" }}
                ta="center"
                fz="xl"
                fw={700}
              >
                Sit Tight! While we are generating a transcript for your
                audiogram
              </Text>
            </Flex>
            <Link href={"./frame"} style={{ textDecoration: "none" }}>
              <Button
                disabled={
                  audiogramDetails.srtFile.length &&
                  audiogramDetails.cover.length
                    ? false
                    : true
                }
                loading={
                  loading.audioDropboxLoader || loading.imgDropboxLoader
                    ? true
                    : false
                }
                loaderPosition="right"
                size="md"
              >
                <Box>Next</Box>
              </Button>
            </Link>
          </Flex>
        </Flex>
      </main>
    </>
  );
}
